{"filter":false,"title":"user.rb","tooltip":"/app/models/user.rb","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"remove","lines":["class User < ActiveRecord::Base","end",""]},{"start":{"row":0,"column":0},"end":{"row":33,"column":0},"action":"insert","lines":["class User < ActiveRecord::Base","\tattr_accessor :remember_token"," before_save { self.email = email.downcase }","  validates :name, presence: true, length: { maximum: 50 }","  VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-.]+\\.[a-z]+\\z/i","  validates :email, presence: true, length: { maximum: 255 },","                    format: { with: VALID_EMAIL_REGEX },","                    uniqueness: { case_sensitive: false }","  has_secure_password","  validates :password, length: { minimum: 6 }","","   def User.digest(string)","    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :","                                                  BCrypt::Engine.cost","    BCrypt::Password.create(string, cost: cost)","  end","","  def User.new_token","    SecureRandom.urlsafe_base64","  end","","  def remember","    self.remember_token = User.new_token","    update_attribute(:remember_digest, User.digest(remember_token))","  end","def authenticated?(remember_token)","    return false if remember_digest.nil?","    BCrypt::Password.new(remember_digest).is_password?(remember_token)","  end","   def forget","    update_attribute(:remember_digest, nil)","  end","end",""]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":11,"column":26},"end":{"row":11,"column":26},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":60,"mode":"ace/mode/ruby"}},"timestamp":1426179911050,"hash":"ee45a36f6b95a5699240f66276bcbe658510d565"}